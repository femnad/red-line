#!/bin/bash
set -u

pid=$$
pidfile=/tmp/red-line.pid
config_file=$HOME/.redline

if [ ! -f $config_file ]; then
    cat > $config_file << EOF
normal-sleep=60
warning-sleep=5
warning-percent=10
critical-percent=3
critical-action=shutdown
critical-countdown=10
EOF
fi

function cleanup {
    if [ -f $pidfile ]
    then
        rm $pidfile
    fi
    exit
}

function get_option {
    option=$1
    value=$(echo -e "$config_file_content" | grep $option | awk -F '=' '{print $2}' | tr -d [:blank:])
    echo $value
}

function read_options {
    config_file_content="$(cat $config_file)"
    action=$(get_option critical-action)
    warning=$(get_option warning-percent)
    critical=$(get_option critical-percent)
    normal_sleep=$(get_option normal-sleep)
    warning_sleep=$(get_option warning-sleep)
    critical_countdown=$(get_option critical-countdown)
}

trap "cleanup" SIGINT SIGTERM

trap "read_options" SIGHUP

if [ -f $pidfile ]
then
    echo 'red-line seems to be running already'
    exit
fi
echo $pid > $pidfile

function get_battery_state {
    echo $(acpi | awk '{print $3}' | awk -F ',' '{print $1}')
}

discharging="Discharging"
full="Full"
unknown="Unknown"

function is_discharging {
    state=$(get_battery_state)
    if [[ "$state" == "$discharging" ]]
    then
        echo "true"
    else
        echo "false"
    fi
}

read_options

function _notify {
    summary="$1"
    message="$2"
    urgency=$3
    notify-send -u $urgency "$summary" "$message" -t $warning_sleep
}

function info_notify {
    _notify "$1" "$2" low
}

function warning_notify {
    _notify "$1" "$2" normal
}

function critical_notify {
    _notify "$1" "$2" critical
}

while true; do
    batt=$(acpi | egrep -o '[0-9]+%' | egrep -o '[0-9]+')
    if [[ "$(is_discharging)" == "true" ]]
    then
        if [[ "$batt" -le "$critical" ]]
        then
            case $action in
                suspend|shutdown|hibernate)
                    for i in $(seq 0 $critical_countdown)
                    do
                        critical_notify "Battery critical, $action imminent" "$(expr $critical_countdown - $i)"
                        if [[ "$(is_discharging)" == "false" ]]; then
                            info_notify "Phew" "Started charging"
                            break
                        fi
                        sleep $warning_sleep
                    done
                    if [[ "$(is_discharging)" == "true" ]]; then
                        eval "systemctl $action"
                    fi
                    ;;
                *)
                    critical_notify "Battery Critical" "$batt%"
                    ;;
            esac
        elif [[ "$batt" -le "$warning" ]]
        then
            warning_notify "Battery Low" "$batt%"
        fi
        sleep $warning_sleep
    else
        state=$(get_battery_state)
        case $state in
            $full)
                info_notify "Battery Full" "Adapter Away!"
                ;;
            $unknown)
                info_notify "Battery Charging Transition" "At $batt%"
                ;;
        esac
        sleep $normal_sleep
    fi
done
